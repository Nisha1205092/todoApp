/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, "description": "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const cors = require('cors');

const app = express();
app.use(bodyParser.json());
app.use(cors());

const FILENAME = 'todoList.txt';

const saveObjToFile = (path, todoObj) => {
  // to maintain a single array
  // we first read from the array
  // then append new object to the array
  const todoArray = readFromFile(path);
  todoArray.push(todoObj);
  saveArrayToFile(path, todoArray);
}

const saveArrayToFile = (path, todoArray) => {
  fs.writeFileSync(path, JSON.stringify(todoArray), err => {
    if (err) {
      console.log('error writing to file');
    }
  })
}


const readFromFile = (path) => {
  try {
    const data = fs.readFileSync(path, 'utf8');
    const todoArray = JSON.parse(data);
    return todoArray;
  } catch (err) {
    console.log('error reading file or parsing JSON');
    return [];
  }
};

/*
-As we have retained to-do list data on file, 
-even after the server is closed
-this route handler fails the test
-which was previously passed
-when we didn't have file storage feature
*/
app.get('/todos', (req, res) => {
  const todoArray = readFromFile(FILENAME);
  res.json(todoArray);
});



app.get('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const todoArray = readFromFile(FILENAME);
  const todo = todoArray.find(todo => todo.id === id);
  if (!todo) {
    res.status(404).send()
  } else {
    res.json(todo);
  }
})

app.post('/todos', (req, res) => {
  const title = req.body.title;
  const completed = req.body.completed;
  const description = req.body.description;
  const id = Math.floor(Math.random() * 1000000);
  // todoArray.push({ id, title, completed, description })
  try {
    saveObjToFile(FILENAME, { id, title, completed, description });
  } catch (err) {
    console.log(`error writing to file, ${err}`)
  }
  res.status(201).json({ id })
})

app.put('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  todoArray = readFromFile(FILENAME);
  const searchedTodoIndex = todoArray.findIndex(todo => todo.id === id);
  // id doesn't exist
  if (searchedTodoIndex === -1) {
    res.status(404).json({ error: 'invalid id' })
  } else {
    // id matches, update the corresponding todo item
    todoArray[searchedTodoIndex] = { ...todoArray[searchedTodoIndex], ...req.body }
    try {
      saveArrayToFile(FILENAME, todoArray);
    } catch (err) {
      console.log(`error writing to file, ${err}`)
    }
    res.json(todoArray[searchedTodoIndex])
  }
})

app.delete('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const todoArray = readFromFile(FILENAME);
  const index = todoArray.findIndex(todo => todo.id === id);
  if (index === -1) {
    res.status(404).send();
  } else {
    todoArray.splice(index, 1);
    try {
      saveArrayToFile(FILENAME, todoArray);
    } catch (err) {
      console.log(`error writing to file, ${err}`)
    }
    res.status(200).send()
  }

})

app.listen(3000, () => console.log('todo server running on 3000'))

// module.exports = app;
